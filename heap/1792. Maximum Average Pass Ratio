#include <vector>
#include <queue>
using namespace std;

class Solution {
public:
    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {
        // Priority queue to maintain the classes with the maximum delta
        auto calcDelta = [](int pass, int total) {
            double current = (double)pass / total;
            double updated = (double)(pass + 1) / (total + 1);
            return updated - current;
        };

        // Max-heap based on the delta improvement
        priority_queue<pair<double, pair<int, int>>> maxHeap;

        for (auto& cls : classes) {
            double delta = calcDelta(cls[0], cls[1]);
            maxHeap.push({delta, {cls[0], cls[1]}});
        }

        // Distribute extra students
        while (extraStudents--) {
            auto top = maxHeap.top();
            maxHeap.pop();

            int pass = top.second.first;
            int total = top.second.second;

            // Add one extra student to the class
            pass++;
            total++;

            // Recalculate delta and push updated class back into the heap
            double newDelta = calcDelta(pass, total);
            maxHeap.push({newDelta, {pass, total}});
        }

        // Calculate the final result
        double result = 0.0;
        while (!maxHeap.empty()) {
            auto top = maxHeap.top();
            maxHeap.pop();

            int pass = top.second.first;
            int total = top.second.second;

            result += (double)pass / total;
        }

        return result / classes.size();
    }
};
